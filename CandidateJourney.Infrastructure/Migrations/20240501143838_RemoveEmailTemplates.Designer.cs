// <auto-generated />
using System;
using CandidateJourney.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CandidateJourney.Infrastructure.Migrations
{
    [DbContext(typeof(CandidateJourneyDbContext))]
    [Migration("20240501143838_RemoveEmailTemplates")]
    partial class RemoveEmailTemplates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandidateJourney.Domain.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CandidateType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfGraduation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraduationType")
                        .HasColumnType("int");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("CandidateJourney.Domain.ContactHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContactHistories");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TargetAudience")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Data Visualization"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Data Engineering / Data Governance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business Intelligence"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Microsoft Development"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Java Development"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Front-end Development"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Low code Development"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Business Automation"
                        },
                        new
                        {
                            Id = 9,
                            Name = "SAP"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Infrastructure"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Digital Workplace"
                        },
                        new
                        {
                            Id = 12,
                            Name = "CSV"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Quality & Compliance (life sciences)"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Security"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Requirements & Testing"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Business Consulting"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Financial Services"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Supply Chain Optimization"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Agile / Scrum"
                        },
                        new
                        {
                            Id = 20,
                            Name = "UI / UX Design"
                        });
                });

            modelBuilder.Entity("CandidateJourney.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Candidate", b =>
                {
                    b.HasOne("CandidateJourney.Domain.Event", null)
                        .WithMany("Candidates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidateJourney.Domain.ContactHistory", b =>
                {
                    b.HasOne("CandidateJourney.Domain.Candidate", null)
                        .WithMany("ContactHistories")
                        .HasForeignKey("CandidateId");

                    b.HasOne("CandidateJourney.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Event", b =>
                {
                    b.HasOne("CandidateJourney.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandidateJourney.Domain.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Candidate", b =>
                {
                    b.Navigation("ContactHistories");
                });

            modelBuilder.Entity("CandidateJourney.Domain.Event", b =>
                {
                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
